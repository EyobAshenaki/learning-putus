import {
  Lucid,
  Blockfrost,
  Address,
  MintingPolicy,
  PolicyId,
  Unit,
  fromText,
  Data,
  getAddressDetails,
  applyParamsToScript
} from 'https://deno.land/x/lucid@0.9.1/mod.ts';
import { blockfrostKey, secretSeed } from './secret.ts';

function readAmount(): bigint {
  const input = prompt('amount: ');
  return input ? BigInt(Number.parseInt(input)) : 1000000n;
}

// set blockfrost endpoint
const lucid = await Lucid.new(
  new Blockfrost('https://cardano-preview.blockfrost.io/api/v0', blockfrostKey),
  'Preview'
);

// load local stored seed as a wallet into lucid
lucid.selectWalletFromSeed(secretSeed);
const addr: Address = await lucid.wallet.address();
console.log('own address: ' + addr);

const pkh: string = getAddressDetails(addr).paymentCredential?.hash || '';
console.log('own pubkey hash: ' + pkh);

const Params = Data.Tuple([Data.String]);
type Params = Data.Static<typeof Params>;
const mintBurnPolicy: MintingPolicy = {
  type: 'PlutusV2',
  script: applyParamsToScript<Params>(
    '590b8a590b870100003232323232332232323232323232323322323233223232323232323232323232333222323232322223232533532323232533553353235001222222222222533533355301f12001335023225335002210031001502d25335333573466e3c0480040e40e04d40bc004540b8010840e440dd400440ac4cd5ce249192a2a2a204d697373696e67207369676e6174757265202a2a2a0002a102b1533553353233355301312001350165015235001223335530161200135019501823500122333573466e1d2000001032031001001353232353355015323233553015120012350012233550250023355301812001235001223355028002333500123303a4800000488cc0ec0080048cc0e80052000001335530151200123500122335502500233350012335530191200123500122335502900235501b001001223335550130150020012335530191200123500122335502900235501900100133355500e0100020013550022233553016120012350012233550260023355301912001235001223355029002337049000800800801280f9aa800910009119aa81100100089a99aaaa80711919aa8091aa800910011aa8009100089a99aaaa8079299a999ab9a33712002900001701689aa80880089aa8098008009119aa8110010008009119aa8108010009aa80091111111111100411001081508158815899ab9c491212a2a2a20496e76616c6964207369676e617475726520746f204d696e74202a2a2a0002a135001220023333573466e1cd55cea80224000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4090094d5d0a80619a8120129aba1500b33502402635742a014666aa050eb9409cd5d0a804999aa8143ae502735742a01066a0480646ae85401cccd540a00cdd69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40f5d69aba15002303e357426ae8940088c98c8108cd5ce02182102009aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81ebad35742a004607c6ae84d5d1280111931902119ab9c043042040135573ca00226ea8004d5d09aba2500223263203e33573807e07c07826aae7940044dd50009aba1500533502475c6ae854010ccd540a00bc8004d5d0a801999aa8143ae200135742a00460626ae84d5d1280111931901d19ab9c03b03a038135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00860426ae84d5d1280211931901619ab9c02d02c02a3333573466e1cd55ce9baa0054800080ac8c98c80accd5ce0160158149bae00510291326320293357389210350543500029135573ca00226ea8004444888ccd54c010480054054cd54c028480048d400488cd54068008d54030004ccd54c0104800488d4008894cd4ccd54c03c48004c8cd405088ccd400c88008008004d40048800448cc004894cd400840ac40040a08d400488cc028008014018400c4cd406401000d4058004cd54c028480048d400488c8cd5406c00cc004014c8004d540b0894cd40044d5403000c884d4008894cd4cc0300080204cd5404401c0044c01800c008c8004d5409488448894cd40044008884cc014008ccd54c01c4800401401000488ccd5cd19b8f0020010210201111223233550093550012200235500122001133335530071200133500b222300330020012001223500222350032233350032335501a003335018335501a00500100222335501b335019335501b006002004335019335501b0060010032335501a335018335501a00500100300233553006120012350012233550160023005001001335501350125012112122230030041122122233002005004112122230010043200135501f221122533500115010221335011300400233553006120010040013200135501e22112225335001135003220012213335005220023004002333553007120010050040011122123300100300211233001225335002100110190181233500222333500322002002001350012200112212330010030021232230023758002640026aa034446666aae7c004940288cd4024c010d5d080118019aba2002019232323333573466e1cd55cea80124000466442466002006004601e6ae854008c014d5d09aba2500223263201933573803403202e26aae7940044dd50009191919191999ab9a3370e6aae75401120002333322221233330010050040030023232323333573466e1cd55cea8012400046644246600200600460306ae854008cd404005cd5d09aba2500223263201e33573803e03c03826aae7940044dd50009aba150043335500875ca00e6ae85400cc8c8c8cccd5cd19b875001480108c84888c008010d5d09aab9e500323333573466e1d4009200223212223001004375c6ae84d55cf280211999ab9a3370ea00690001091100191931901019ab9c02102001e01d01c135573aa00226ea8004d5d0a80119a8063ae357426ae8940088c98c8068cd5ce00d80d00c09aba25001135744a00226aae7940044dd5000899aa800bae75a224464460046eac004c8004d5405c88c8cccd55cf80112804119a80399aa80498031aab9d5002300535573ca00460086ae8800c05c4d5d08008891001091091198008020018891091980080180109119191999ab9a3370ea002900011a80398029aba135573ca00646666ae68cdc3a801240044a00e464c6402866ae700540500480444d55cea80089baa0011212230020031122001232323333573466e1d400520062321222230040053007357426aae79400c8cccd5cd19b875002480108c848888c008014c024d5d09aab9e500423333573466e1d400d20022321222230010053007357426aae7940148cccd5cd19b875004480008c848888c00c014dd71aba135573ca00c464c6402466ae7004c04804003c0380344d55cea80089baa001232323333573466e1cd55cea80124000466442466002006004600a6ae854008dd69aba135744a004464c6401c66ae7003c0380304d55cf280089baa0012323333573466e1cd55cea800a400046eb8d5d09aab9e500223263200c33573801a01801426ea80048c8c8c8c8c8cccd5cd19b8750014803084888888800c8cccd5cd19b875002480288488888880108cccd5cd19b875003480208cc8848888888cc004024020dd71aba15005375a6ae84d5d1280291999ab9a3370ea00890031199109111111198010048041bae35742a00e6eb8d5d09aba2500723333573466e1d40152004233221222222233006009008300c35742a0126eb8d5d09aba2500923333573466e1d40192002232122222223007008300d357426aae79402c8cccd5cd19b875007480008c848888888c014020c038d5d09aab9e500c23263201533573802c02a02602402202001e01c01a26aae7540104d55cf280189aab9e5002135573ca00226ea80048c8c8c8c8cccd5cd19b875001480088ccc888488ccc00401401000cdd69aba15004375a6ae85400cdd69aba135744a00646666ae68cdc3a80124000464244600400660106ae84d55cf280311931900719ab9c00f00e00c00b135573aa00626ae8940044d55cf280089baa001232323333573466e1d400520022321223001003375c6ae84d55cf280191999ab9a3370ea004900011909118010019bae357426aae7940108c98c802ccd5ce00600580480409aab9d50011375400224464646666ae68cdc3a800a40084244400246666ae68cdc3a8012400446424446006008600c6ae84d55cf280211999ab9a3370ea00690001091100111931900619ab9c00d00c00a009008135573aa00226ea80048c8cccd5cd19b8750014800880148cccd5cd19b8750024800080148c98c8020cd5ce00480400300289aab9d37540022440042440029309000a4810350543100223370000400222464600200244660066004004003',
    [pkh],
    Params
  )
};

const policyId: PolicyId = lucid.utils.mintingPolicyToId(mintBurnPolicy);
console.log('minting policy: ' + policyId);

const unit: Unit = policyId + fromText('Mint Burn');

const amount: bigint = readAmount();

// Select the second account from the wallet

// lucid.selectWalletFromSeed(secretSeed, { accountIndex: 1 });
// const addr1: Address = await lucid.wallet.address();
// console.log('other address: ' + addr1);

// const pkh1: string = getAddressDetails(addr1).paymentCredential?.hash || '';
// console.log('other pubkey hash: ' + pkh1);

const tx = await lucid
  .newTx()
  .mintAssets({ [unit]: amount }, Data.void())
  .attachMintingPolicy(mintBurnPolicy)
  .addSignerKey(pkh)
  .complete();

const signedTx = await tx.sign().complete();
const txHash = await signedTx.submit();
console.log('tid: ' + txHash);
